1. Blocking Message Send & Receive
Added: sendb.c receiveb.c writebuff.c readbuff.c
Modified: process.h queue.h create.c kill.c

The sendb checks the receiver's flag prbuffull first. If the receiver's buffer is full, it changes its state to PRSND, and put itself in receiver's queue.

The receiveb checks its buffer to see if it is empty. If so, the receiver blocks. If not, the receiver read the first msg from buffer. Before returning, it checks its associated queue. If it is not empty, unlock one process using FIFO.

When the process is terminated, it checks if its queue is empty. If not, it put all the blocked processes back in the ready queue. 

In process.h, I added two new states PRSND, PR_RECVB, and a circular buffer stucture. For the process table, I created 

	buff	prbuffer;
	bool8 	prbuffull;
	qid16	prwait;

prbuffer is used to store the msgs; prbuffull is a flag to indicate whether the buffer is full or not; prwait is a queque.

In queue.h, I modified the number of queue entries to be (3*NPROC + 4 + NSEM + NSEM).

In create.c, I initialized the entries.

    prptr->prbuffull = FALSE;
    prptr->prwait = newqueue();
    prptr->prbuffer.size  = MSGSIZE;
    prptr->prbuffer.start = 0;
    prptr->prbuffer.count = 0;

The writebuff() and readbuff() perform write and read operations on the buffer.

In kill.c, I added

	while(nonempty(prptr->prwait)){
		ready(dequeue(prptr->prwait),RESCHED_NO);	
	}


2. Asynchronous Message Receive
Added: registerrecv.c
Modified: process.h create.c send.c

registerrecv changes the receiver's registration flag prreg to be TRUE, and store the buffer's address and the function pointer in the process table.

send checks the receiver's registration flag first. If it is registerred, the sender calls the callback function, and passes the msg to the buffer. If not registerred, sendder performs normal send().

In process table, I added

	bool8	prreg;
	umsg32 *prmsgaddr;
	int		(*prregptr)(void);

In create.c, I initialized the entries.

	prptr->prreg = FALSE;

In send.c, I added 

	prptr = &proctab[pid];
	
	if ((prptr->prreg) && (prptr->prstate != PR_FREE)) {
		*prptr->prmsgaddr = msg;
		(*prptr->prregptr)();
		restore(mask);		/* restore interrupts */
		return OK;
	}


3. Garbage Collection Support
Added: getmemb.c freememb.c
Modified: process.h create.c kill.c

getmemb allocates the request size of memory plus additional space to store information of its block length and the pointer to the previous allocated memory block address. The head of the tracklist is stored on the process table.

freememb frees the request size of memory plus the additional space used for storing information. Then, it updates the process's tracklist.

When the process is terminated, it checks if there are still unfreed memory blocks on the tracklist. If so, it frees all the memory blocks on the tracklist.

In process.h, I added a new struct called tracklist, which is used to track the memory block allocated to the process. In process table, I added
	
	tracklist	*prblock;

In create.c, I initialized the associated entry.

	prptr->prblock = NULL;